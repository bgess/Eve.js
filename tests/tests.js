// Generated by CoffeeScript 1.3.3
(function() {

  describe("Eve.js", function() {
    it("Should allow for registering modules and attaching them to named scopes.", function() {
      var el, k, original, results, _results;
      results = {
        'm1-1': "Yvax Bar",
        'm1-2': "Yvax Gjb",
        'm1-3': "Yvax Guerr",
        'm2-1': "Yvax Sbhe",
        'm2-2': "Yvax Svir",
        'm2-3': "Yvax Fvk"
      };
      _results = [];
      for (k in results) {
        el = document.getElementById(k);
        original = el.innerHTML;
        $(el).trigger("mouseover");
        results[k].should.eq(el.innerHTML);
        $(el).trigger("mouseout");
        _results.push(original.should.eq(el.innerHTML));
      }
      return _results;
    });
    it("Should allow for passing options to attached modules", function() {
      var argsSpy;
      argsSpy = sinon.spy();
      Eve.register("arg-test", argsSpy);
      Eve.attach('arg-test', '.foo', 'a', 'b', 'c');
      return argsSpy.calledWith('a', 'b', 'c').should.be["true"];
    });
    it("Should scope .find to a CSS namespace.", function() {
      var consoleSpy, oconsole;
      oconsole = console.log;
      consoleSpy = sinon.spy();
      console.log = consoleSpy;
      $('#m3-ul').trigger('click');
      console.log = oconsole;
      return consoleSpy.calledWith("Inner module click!").should.be["true"];
    });
    it(".find by itself should return the root parent namespace", function() {
      var result;
      result = null;
      Eve.scope('#m2', function() {
        return result = this;
      });
      result[0].getAttribute('id').should.eq('m2');
      Eve.scope('.list-module', function() {
        result = this;
        if (result.getDOMNodes) {
          return result = result.getDOMNodes();
        }
      });
      return result.length.should.eq(2);
    });
    it(".first should return the first of matching items", function() {
      var el;
      Eve.scope('#click-me', function() {
        return this.on('click', 'a', function(e) {
          return this.first('a').html('clicked');
        });
      });
      el = $('#click-me-a').trigger('click')[0];
      el.innerHTML.should.eq('clicked');
      Eve.scope('#els-list', function() {
        return this.first('span')[0].className = 'clicked-first';
      });
      el = $('#first')[0];
      return el.className.should.eq('clicked-first');
    });
    it("Should scope .attach to a CSS namespace.", function() {
      var el, k, original, results, _results;
      results = {
        'm3-1': "Yvax Bar",
        'm3-2': "Yvax Gjb",
        'm3-3': "Yvax Guerr"
      };
      _results = [];
      for (k in results) {
        el = document.getElementById(k);
        original = el.innerHTML;
        $(el).trigger('mouseover');
        results[k].should.eq(el.innerHTML);
        $(el).trigger('mouseout');
        _results.push(original.should.eq(el.innerHTML));
      }
      return _results;
    });
    it("Should scope module .find to child CSS namespace.", function() {
      var active, i, id, _i, _results;
      _results = [];
      for (i = _i = 1; _i <= 3; i = ++_i) {
        id = 'm1-' + i;
        $("#" + id).trigger('click');
        active = $('#m1 .active');
        active.length.should.eq(1);
        _results.push(active[0].id.should.eq(id));
      }
      return _results;
    });
    it("Should scope listener .find to event namespace.", function() {
      var el1, el2;
      el1 = $('#m1-1').trigger('click')[0];
      el2 = $('#m2-1').trigger('click')[0];
      el1.className.should.eq('active');
      el2.className.should.eq('active');
      return el1.className.should.eq('active');
    });
    it("Should scope inner-scoped .scope to parent namespace", function() {
      var el1, el2, el3, el4;
      el1 = $('#inside-scope').trigger('click')[0];
      el2 = $('#out-of-scope').trigger('click')[0];
      el1.className.should.eq("affected");
      el2.className.should.not.eq("affected");
      el3 = $('#inside-recursive-scope').trigger('click')[0];
      el4 = $('#out-of-recursive-scope').trigger('click')[0];
      el3.className.should.eq("affected");
      return el4.className.should.not.eq("affected");
    });
    return it("Should allow for extending Eve.js with additional scoped methods", function() {
      var bing, bing2;
      Eve.extend('handle', function(key, e, fun) {
        return this.on(e, "[data-action=" + key + "]", fun);
      });
      Eve.scope('.extended-area', function() {
        return this.handle('bing', 'click', function(e) {
          e.target.innerHTML = 'Bing';
          if (e.target.setHTML) {
            return e.target.setHTML('Bing');
          }
        });
      });
      bing = $('#bing-target').trigger('click')[0];
      bing2 = $('#bing-target2').trigger('click')[0];
      bing.innerHTML.should.eq('Bing');
      return bing2.innerHTML.should.eq('Ping');
    });
  });

}).call(this);
